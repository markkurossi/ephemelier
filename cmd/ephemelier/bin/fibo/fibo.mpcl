// -*- go -*-
//
// Copyright (c) 2025 Markku Rossi
//
// All rights reserved.
//

package main

import (
	"encoding/binary"
	"ephemelier/kernel"
)

func main(g kernel.G1B, e kernel.E1B) (
	[]byte, kernel.PC, kernel.Syscall, int32) {

	nonce, mem, ok := kernel.DecodeMem(g.mem, g.key, e.key)
	if !ok {
		return nil, 0, kernel.SysExit, -kernel.EINVAL
	}

	f0 := binary.GetUint32(mem[0:])
	f1 := binary.GetUint32(mem[4:])
	l := binary.GetUint32(mem[8:])

	f2 := f0 + f1
	l--

	mem = binary.PutUint32(mem, 0, f1)
	mem = binary.PutUint32(mem, 4, f2)
	mem = binary.PutUint32(mem, 8, l)

	var next kernel.PC

	if l == 0 {
		next = intern(StResult)
	} else {
		next = intern(StFibo)
	}

	return kernel.EncodeMem(nonce, mem, g.key, e.key), next, kernel.SysYield, 0
}
