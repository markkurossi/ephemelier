// -*- go -*-
//
// Copyright (c) 2025 Markku Rossi
//
// All rights reserved.
//

package main

import (
	"ephemelier/kernel"
)

func main(g kernel.G1B, e kernel.E1B) (
	[]byte, kernel.PC, kernel.Syscall, int32, []byte, int32) {

	if g.arg0 < 0 {
		return nil, 0, kernel.SysExit, 1, nil, 0
	}

	var nonce [12]byte
	var mem [16]byte

	var key [kernel.KeySize]byte
	for i := 0; i < kernel.KeySize; i++ {
		key[i] = g.privShare[i] ^ e.privShare[i]
	}

	mem = binary.PutUint32(mem, 0, uint32(g.arg0))

	return kernel.EncodeMemory(nonce, mem, key), intern(StGetportResult),
		kernel.SysGetport, g.arg0, nil, 0
}
