// -*- go -*-
//
// Copyright (c) 2025 Markku Rossi
//
// All rights reserved.
//

package main

import (
	"bytes"
	"ephemelier/kernel"
	"unicode"
)

func main(g kernel.Garbler, e kernel.Evaluator) (
	[]byte, kernel.PC, kernel.Syscall, int32, []byte, int32) {

	if g.arg0 < 0 {
		return nil, 0, kernel.SysExit, 1, nil, 0
	}
	if g.arg0 == 0 || (g.arg0 == 1 && g.argBuf[0] == 0x4) {
		return nil, intern(StEnd), kernel.SysYield, 0, nil, 0
	}
	if bytes.HasPrefix(g.argBuf, []byte("exit")) {
		return nil, intern(StEnd), kernel.SysYield, 0, nil, 0
	}

	for i := 0; i < len(g.argBuf); i++ {
		if unicode.IsSpace(rune(g.argBuf[i])) {
			return nil, intern(StSpawnResult), kernel.SysSpawn, 0, g.argBuf, i
		}
	}

	var msg [300]byte
	size := copy(msg, []byte("Hello, "))
	size += copy(msg[size:], g.argBuf)

	msg[size-2] = '!'
	msg[size-1] = '\n'

	return nil, intern(StWriteResult), kernel.SysWrite, 1, msg, size
}
