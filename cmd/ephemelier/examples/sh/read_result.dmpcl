// -*- go -*-
//
// Copyright (c) 2025 Markku Rossi
//
// All rights reserved.
//

package main

import (
	"crypto/cipher/gcm"
	"ephemelier/kernel"
)

const (
	MemSize = gcm.NonceSize + 256 + gcm.TagSize
	IOSize  = 256
)

type Garbler struct {
	privShare [16]byte
	mem       [MemSize]byte
	arg0      int32
	argBuf    []byte
	arg1      int32
}

type Evaluator struct {
	privShare [16]byte
	arg0      int32
	argBuf    []byte
}

func main(g Garbler, e Evaluator) (
	[]byte, kernel.PC, kernel.Syscall, int32, []byte, int32) {

	if g.arg0 < 0 {
		return nil, 0, kernel.SysExit, 1, nil, 0
	}

	var msg [300]byte
	n := copy(msg, []byte("Hello, "))
	var size int32

	g.arg0 -= 2
	for i := 0; i < len(g.argBuf); i++ {
		if i < g.arg0 {
			size = n + i
			msg[size] = g.argBuf[i]
		} else if i == g.arg0 {
			size = n + i
			msg[size] = '!'
		} else if i == g.arg0+1 {
			size = n + i
			msg[size] = '\n'
		}
	}
	size++

	return nil, intern(StWriteResult), kernel.SysWrite, 1, msg, size
}
