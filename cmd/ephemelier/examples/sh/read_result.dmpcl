// -*- go -*-
//
// Copyright (c) 2025 Markku Rossi
//
// All rights reserved.
//

package main

import (
	"crypto/cipher/gcm"
	"ephemelier/kernel"
)

type Garbler struct {
	privShare [16]byte
	mem       []byte
	arg0      int32
	argBuf    []byte
	arg1      int32
}

type Evaluator struct {
	privShare [16]byte
	arg0      int32
	argBuf    []byte
}

func main(g Garbler, e Evaluator) (
	[]byte, kernel.PC, kernel.Syscall, int32, []byte, int32) {

	if g.arg0 < 0 {
		return nil, 0, kernel.SysExit, 1, nil, 0
	}

	var msg [300]byte
	size := copy(msg, []byte("Hello, "))
	size += copy(msg[size:], g.argBuf)

	msg[size-2] = '!'
	msg[size-1] = '\n'

	return nil, intern(StWriteResult), kernel.SysWrite, 1, msg, size
}
